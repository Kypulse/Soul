package info.soul.addon.modules;

import info.soul.addon.SoulAddon;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.events.world.TickEvent;
import meteordevelopment.meteorclient.settings.*;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.orbit.EventHandler;
import meteordevelopment.orbit.EventPriority;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityStatuses;
import net.minecraft.entity.EquipmentSlot;
import net.minecraft.item.Items;
import net.minecraft.network.packet.s2c.play.EntityStatusS2CPacket;
import meteordevelopment.meteorclient.utils.player.InvUtils;
import meteordevelopment.meteorclient.utils.player.PlayerUtils;
import meteordevelopment.utils.misc.RandomUtil;
import java.util.Random;


public class GrimAutoTotem extends Module {
    private final SettingGroup sgGeneral = settings.getDefaultGroup();

    private final Setting<Mode> mode = sgGeneral.add(new EnumSetting.Builder<Mode>()
        .name("mode")
        .description("When to hold a totem.")
        .defaultValue(Mode.Smart)
        .build()
    );

    private final Setting<Double> healthThreshold = sgGeneral.add(new DoubleSetting.Builder()
        .name("health-threshold")
        .description("Switch to totem if your health + absorption is below this.")
        .defaultValue(10)
        .min(1)
        .max(20)
        .sliderMax(20)
        .visible(() -> mode.get() == Mode.Smart)
        .build()
    );

    private final Setting<Boolean> elytra = sgGeneral.add(new BoolSetting.Builder()
        .name("elytra")
        .description("Hold totem when gliding with Elytra.")
        .defaultValue(true)
        .visible(() -> mode.get() == Mode.Smart)
        .build()
    );

    private final Setting<Integer> minDelay = sgGeneral.add(new IntSetting.Builder()
        .name("min-delay-ms")
        .description("Minimum delay between swaps (milliseconds).")
        .defaultValue(100)
        .min(20)
        .max(500)
        .build()
    );

    private final Setting<Integer> maxDelay = sgGeneral.add(new IntSetting.Builder()
        .name("max-delay-ms")
        .description("Maximum delay between swaps (milliseconds).")
        .defaultValue(200)
        .min(20)
        .max(1000)
        .build()
    );

    private int delayTicks = 0;
    private int delayTargetTicks = 0;
    private boolean locked = false;

    public GrimAutoTotem() {
        super(SoulAddon.CATEGORY, "grim-stealth-auto-totem", "Fast but stealthy auto totem for Grim AC.");
    }

    private int getRandomDelayTicks() {
        // Convert ms delay to ticks (20 ticks = 1 second)
        int minTicks = Math.max(1, minDelay.get() * 20 / 1000);
        int maxTicks = Math.max(minTicks, maxDelay.get() * 20 / 1000);
        return RandomUtil.getRandom(minTicks, maxTicks);
    }

    @EventHandler(priority = EventPriority.HIGH)
    private void onTick(TickEvent.Pre event) {
        if (mc.player == null || mc.world == null) return;

        delayTicks++;
        if (delayTicks < delayTargetTicks) return;

        delayTicks = 0;
        delayTargetTicks = getRandomDelayTicks();

        double totalHealth = mc.player.getHealth() + mc.player.getAbsorptionAmount();
        boolean lowHealth = totalHealth < healthThreshold.get();
        boolean elytraFlying = elytra.get() && mc.player.getEquippedStack(EquipmentSlot.CHEST).getItem() == Items.ELYTRA && mc.player.isGliding();

        locked = mode.get() == Mode.Strict || (mode.get() == Mode.Smart && (lowHealth || elytraFlying));

        if (locked) {
            if (mc.player.getOffHandStack().getItem() != Items.TOTEM_OF_UNDYING) {
                var totemResult = InvUtils.find(Items.TOTEM_OF_UNDYING);
                if (totemResult.found()) {
                    InvUtils.move().from(totemResult.slot()).toOffhand();
                }
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGH)
    private void onTotemPop(PacketEvent.Receive event) {
        if (!(event.packet instanceof EntityStatusS2CPacket p)) return;
        if (p.getStatus() != EntityStatuses.USE_TOTEM_OF_UNDYING) return;

        Entity entity = p.getEntity(mc.world);
        if (entity == null || !entity.equals(mc.player)) return;

        // Reset delay so totem refill tries immediately but with a slight natural delay
        delayTicks = 0;
        delayTargetTicks = getRandomDelayTicks();
    }

    public boolean isLocked() {
        return isActive() && locked;
    }

    @Override
    public String getInfoString() {
        return locked ? "Active" : "Inactive";
    }

    public enum Mode {
        Smart,
        Strict
    }
}
